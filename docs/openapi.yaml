openapi: 3.1.0
info:
  title: Messaging Service API
  version: "1.0"
servers:
  - url: http://localhost:3000
paths:
  /chats:
    post:
      summary: Create a chat
      description: Create a new chat between two participants.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateChatRequest"
      responses:
        "200":
          description: Chat created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Chat"
        "400":
          description: Bad Request
  /messages:
    post:
      summary: Send a message
      description: Send a message to an existing chat. Returns an error if the chat does not exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendMessageRequest"
      responses:
        "200":
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Bad Request
  /chats/{chatId}/messages:
    get:
      summary: Get chat messages
      description: Retrieve the list of messages for a given chat.
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
        "400":
          description: Bad Request
  /messages/{messageId}/status:
    put:
      summary: Update message status
      description: Update the status of a message.
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStatusRequest"
      responses:
        "204":
          description: Message status updated successfully
        "400":
          description: Bad Request
  /users/{userId}/chats:
    get:
      summary: List chats for a user
      description: Retrieve all chats in which the specified user is a participant.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List of chats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Chat"
        "400":
          description: Bad Request
components:
  schemas:
    CreateChatRequest:
      type: object
      properties:
        participant1Id:
          type: integer
        participant2Id:
          type: integer
      required:
        - participant1Id
        - participant2Id
    SendMessageRequest:
      type: object
      properties:
        chatId:
          type: integer
        senderId:
          type: integer
        content:
          type: string
      required:
        - chatId
        - senderId
        - content
    Message:
      type: object
      properties:
        id:
          type: integer
        chatId:
          type: integer
        senderId:
          type: integer
        content:
          type: string
        timestamp:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - sent
            - delivered
            - read
            - failed
      required:
        - id
        - chatId
        - senderId
        - content
        - timestamp
        - status
    UpdateStatusRequest:
      type: object
      properties:
        status:
          type: string
          enum:
            - sent
            - delivered
            - read
            - failed
      required:
        - status
    Chat:
      type: object
      properties:
        id:
          type: integer
        participant1Id:
          type: integer
        participant2Id:
          type: integer
        metadata:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - participant1Id
        - participant2Id
        - createdAt
