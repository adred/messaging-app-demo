// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/jmoiron/sqlx"
	"messaging-app/application"
	"messaging-app/config"
	"messaging-app/infrastructure/api"
	"messaging-app/infrastructure/mq"
	"messaging-app/infrastructure/repository"
	"net/http"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

// InitializeApp sets up and returns an App with all dependencies injected.
func InitializeApp() (*App, error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, err
	}
	db, err := ProvideDB(configConfig)
	if err != nil {
		return nil, err
	}
	messageRepository := repository.NewMessageRepository(db)
	chatRepository := repository.NewChatRepository(db)
	messageService := application.NewMessageService(messageRepository, chatRepository)
	handler := api.NewHandler(messageService)
	mux := api.NewRouter(handler)
	rabbitMQ, err := ProvideRabbitMQ(configConfig)
	if err != nil {
		return nil, err
	}
	app := NewApp(mux, db, rabbitMQ)
	return app, nil
}

// wire.go:

// App aggregates the dependencies needed to run the application.
type App struct {
	Router   http.Handler
	DB       *sqlx.DB
	RabbitMQ *mq.RabbitMQ
}

// NewApp is a constructor for App.
func NewApp(router http.Handler, db *sqlx.DB, rabbitMQ *mq.RabbitMQ) *App {
	return &App{
		Router:   router,
		DB:       db,
		RabbitMQ: rabbitMQ,
	}
}

// ProvideDB initializes the database connection.
func ProvideDB(cfg *config.Config) (*sqlx.DB, error) {
	return sqlx.Connect("mysql", cfg.DBDSN)
}

// ProvideRabbitMQ initializes the RabbitMQ connection.
func ProvideRabbitMQ(cfg *config.Config) (*mq.RabbitMQ, error) {

	return mq.NewRabbitMQ(cfg.RabbitMQDSN, cfg.RabbitMQQueue)
}
